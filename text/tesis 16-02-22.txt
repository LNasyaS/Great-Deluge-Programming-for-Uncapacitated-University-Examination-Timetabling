#include <iostream> // input output stream
#include <cstdlib> // general utilities
#include <fstream> // file Stream
#include <vector> // store data
#include <set>
#include <iterator>
#include <algorithm>   
#include <random>
#include <map> 
#include <time.h>

using namespace std; 

/************************************************************** helper functions **************************************************************/
// For comparing 2nd column order
bool sortcol(const vector<int>& v1,const vector<int>& v2) { 
    return v1[1] > v2[1]; 
} 

// function to find max element of a vector
int maxElement(vector<int> vector) {
    int max = *max_element(vector.begin(), vector.end());
    return max;
}

// function to find if there are duplicates in a vector
bool noDuplicates(vector<int> a, vector<int> b) {
    a.insert(a.end(), b.begin(), b.end());
    sort(a.begin(), a.end());
    auto it = unique(a.begin(), a.end());
    bool wasUnique = (it == a.end());

    return wasUnique;
}

// function to count duplicate elements
int countDuplicates(vector<int> a, vector<int> b) {
    a.insert(a.end(), b.begin(), b.end());
    int allElements = a.size();
    sort(a.begin(), a.end());
    a.erase(unique(a.begin(), a.end()), a.end());
    int duplicateElements = allElements - a.size();

    return duplicateElements;
}

int countConflicts(vector<int> solutionExams, vector<vector<int>> conflictMatrix) {
    int conflicts = 0;
    for (int exam = 0; exam < solutionExams.size(); exam++) {
        for (int exam2 = exam + 1; exam2 < solutionExams.size(); exam2++) {
            if (solutionExams[exam] == solutionExams[exam2] && conflictMatrix[exam][exam2] > 0) {
                conflicts++;
            }
        }
    }
    return conflicts;
}

// list of all exams in conflict
vector<int> inConflict(vector<int> solution, vector<vector<int>> conflictMatrix) {
    vector<int> conflictedExams;
    for (int exam = 0; exam < solution.size(); exam++) {
        for (int exam2 = exam + 1; exam2 < solution.size(); exam2++) {
            if (solution[exam] == solution[exam2] && conflictMatrix[exam][exam2] > 0) {
                conflictedExams.push_back(exam);
                goto nextExam;
            }
        }
        nextExam:;
    }
    return conflictedExams;
}

// list of exams in conflict with exam e
vector<int> commonStudents(int exam, vector<int> solution, vector<vector<int>> conflictMatrix) {
    vector<int> commonStudents;
    for(int exam2 = 0; exam2 < solution.size(); exam2++) {
        if (solution[exam] != solution[exam2] && conflictMatrix[exam][exam2] > 0) {
            commonStudents.push_back(exam2);
        }
    }
    return commonStudents;
}

int calculatePenalty(vector<int> solutionExams, vector<vector<int>> conflictMatrix) {
    int penaltyWeight[] = {0,16,8,4,2,1};
    int penalty = 0;
    for (int exam = 0; exam < solutionExams.size(); exam++) {
        for (int exam2 = exam + 1; exam2 < solutionExams.size(); exam2++) {
            int distance = abs(solutionExams[exam2] - solutionExams[exam]);
            if (distance <= 5) {
                penalty += conflictMatrix[exam][exam2] * penaltyWeight[distance];
            }
        }
    }
    return penalty;
}

/*********************************************************** local search operators ***********************************************************/

// move exam
vector<int> moveExam(vector<int> solution, vector<vector<int>> conflictMatrix) {
    vector<int> examConflicts = inConflict(solution, conflictMatrix);
    mt19937 rng(clock());
    uniform_int_distribution<int> randExam(0, examConflicts.size()-1);
    uniform_int_distribution<int> randPeriod(0, maxElement(solution)-1);

    int e = examConflicts[randExam(rng)];
    int p = randPeriod(rng);
    
    solution.at(e) = p;
    return solution;
}

// swap exam
// vector<int> swapExams(int e1, int e2, vector<int> solutionExam, vector<vector<int>> conflictMatrix) {
//     int temp = solutionExam[e1];
//     solutionExam.at(e1) = solutionExam[e2];
//     solutionExam.at(e2) = temp;
//     return solutionExam;
// }

vector<int> swapExams(vector<int> solution, vector<vector<int>> conflictMatrix) {
    mt19937 rng(clock());
    
    vector<int> examConflicts = inConflict(solution, conflictMatrix);
    uniform_int_distribution<int> randExam(0, examConflicts.size()-1);
    int e1 = examConflicts[randExam(rng)];

    vector<int> sameStudents = commonStudents(e1, solution, conflictMatrix);
    uniform_int_distribution<int> randExam2(0, sameStudents.size()-1);
    int e2 = sameStudents[randExam2(rng)];

    int temp = solution[e1];
    solution.at(e1) = solution[e2];
    solution.at(e2) = temp;
    return solution;
}

// kick exam
vector<int> kickExam(int e1, int e2, int p, vector<int> solutionExam) {
    solutionExam.at(e1) = solutionExam[e2];
    solutionExam.at(e2) = p;
    return solutionExam;
}

// double kick exam
vector<int> doubleKickExam(int e1, int e2, int e3, int p, vector<int> solutionExam) {
    solutionExam.at(e1) = solutionExam[e2];
    solutionExam.at(e2) = solutionExam[e3];
    solutionExam.at(e3) = p;
    return solutionExam;
}

// kempe chain
vector<int> kempeChain(int e, int p, vector<int> solutionExam, vector<vector<int>> conflictMatrix) {
    return solutionExam;
}

// swap periods
vector<int> swapPeriods(int p1, int p2, vector<int> solutionExam) {
    return solutionExam;
}

/*********************************************************** great deluge algorithm ***********************************************************/
vector<int> greatDeluge(vector<int> solution, vector<vector<int>> conflictMatrix, int maxIteration) {
    // Setting Parameters
    mt19937 rng(clock());
    vector<int> bestSolution = solution;
    int cost = countConflicts(solution, conflictMatrix);
    double desired = cost * 0.8;
    double level = cost * 1.2;
    double rainSpeed = (level - desired)/maxIteration;
    int bestCost = cost;
    
    // Start Algorithm
    int i = 0;
    int lastImproved = 0;
    uniform_int_distribution<int> randOpt(1,2);
    while (i < maxIteration ) {
        vector<int> newSolution;
        int chooseOpt = randOpt(rng);
        switch (chooseOpt) {
            case 1:
                newSolution = moveExam(solution, conflictMatrix);
                break;
            case 2:
                newSolution = swapExams(solution, conflictMatrix);
                break;
        }

        // Update new cost:
        int newCost = countConflicts(newSolution, conflictMatrix);
        if (newCost <= cost || newCost <= level) {
            solution = newSolution;
            cost = newCost;
            lastImproved = 0;
        } else {
            lastImproved++;
        }
        // Update best cost
        if (newCost < bestCost) {
            bestSolution = newSolution;
            bestCost = newCost;
        }
        // Update water level
        level -= rainSpeed;
        i++;
        
        // If no improvement/reach desired cost
        if (lastImproved >= 5 || level <= bestCost || cost <= desired) {
            solution = bestSolution;
        }
        if (cost <= desired) {
            desired = cost * 0.8;
            rainSpeed = (cost - desired) / (maxIteration - i);
            level = cost * 1.2;
        }
    }
    return bestSolution;
}


/******************************************************************** main **********************************************************************/
int main (int argc, char *argv[]) { 

    // calculate computation time
    clock_t tStart = clock();

    // random number seed
    mt19937 rng(20); 

    /************************************************************ opening the file ************************************************************/
    cout << endl << "Opening the file...." << endl;
    if (argc != 2) {
        cout << "input_instance" << endl;
        exit(1);
    }
    
    ifstream inFile(argv[1], ios::in);
    
    // input file could not be opened
    if (!inFile) {
        cout << "Error!! Input file: " << argv[1] << " could not be opened" << endl;
        inFile.close();
        exit(-1);
    } // end if

    // input data
    // number of exams, students, and periods
    int noOfExams, noOfStudents, noOfPeriods = 0;

    string temp;

    inFile >> temp;
    noOfExams = stoi(temp);
    // cout << "Number of Exams: " << noOfExams << "\n";

    inFile >> temp;
    noOfStudents = stoi(temp);
    // cout << "Number of Student: " << noOfStudents << "\n";

    inFile >> temp;
    noOfPeriods = stoi(temp);
    // cout << "Number of Periods: " << noOfPeriods << "\n";

    // number of students registered to an exams
    string exams[noOfExams];
    double students[noOfStudents];
    vector<vector<int>> studentsInExam;
    for (int i = 0; i < noOfExams; i++) {
        inFile >> temp;
        exams[i] = temp;
        inFile >> temp;
        students[i] = stoi(temp);
        
        studentsInExam.push_back(vector<int>());
        studentsInExam[i].push_back(stoi(exams[i]));
        studentsInExam[i].push_back(students[i]);
        // cout << "Exam " << exams[i] << ": " << students[i] << " students. \n";
    }
    sort(studentsInExam.begin(), studentsInExam.end(),sortcol); 

    // for (int i = 0; i < noOfExams; i++) {
    //     cout << studentsInExam[i][0] << "\t" << studentsInExam[i][1] << endl;
    // }

    // exams taken by a student
    vector<vector<int>> examStudents;
    // inFile >> temp;
    int fileReader;
    for (int i = 0; i < noOfExams; i++) {
        examStudents.push_back(vector<int>());
    }

    while(inFile >> temp) {
        int studentID = stoi(temp.erase(0,1)) - 1;
        inFile >> temp;
        examStudents[stoi(temp) - 1].push_back(studentID);
    }
    inFile.close(); 

    /**************************************************************** Conflict Matrix ****************************************************************/

    // conflict matrix
    cout << "Creating conflict matrix....";
    clock_t tConflictMatrix = clock();    
    vector<vector<int>> conflictMatrix;
    ofstream myfile;
    // myfile.open("test.csv");
    for (int exam = 0; exam < noOfExams; exam++) {
        conflictMatrix.push_back(vector<int>());
        for (int exam2 = 0; exam2 < noOfExams; exam2++) {
            if (exam == exam2) {
                conflictMatrix[exam].push_back(0);
                // myfile << conflictMatrix[exam][exam2] << " ";
            } else {
                conflictMatrix[exam].push_back(countDuplicates(examStudents[exam], examStudents[exam2]));
                // myfile << conflictMatrix[exam][exam2] << " ";
            }
        }
        // cout << endl;
        // myfile <<"\n";
    }
    // myfile.close();
    printf(" (time taken: %.2fs)\n", (double)(clock() - tConflictMatrix)/CLOCKS_PER_SEC);
    
    /*************************************************************** Initial Solution ***************************************************************/
    
    // generate random solution per exam
    // // int seed = 10;
    // cout << "Generating Random Solution...." << endl;
    // // int solution[noOfExams];
    // // mt19937 rng(seed);
    // uniform_int_distribution<int> gen(0, noOfPeriods-1);
    // vector<int> solutionExam;
    // for (int i = 0; i < noOfExams; i++) {
    //     solutionExam.push_back(gen(rng));
    // }

    // generate solutions per period
    clock_t tInitialSolution = clock();
    cout << "Generating greedy solution.... ";
    vector<set<int>> solutionPeriods;
    vector<int> solutionExam;
    for (int period = 0; period < noOfPeriods; period++) {
        solutionPeriods.push_back(set<int>());
    }
    for (int exam = 0; exam < noOfExams; exam++) {
        solutionExam.push_back(0);
    }
    for (int exam = 0; exam < noOfExams; exam++) {
        int sortedExam = studentsInExam[exam][0] - 1;
        // cout << sortedExam << endl;
        for (int period = 0; period < noOfPeriods; period++) {
            bool isSafe = 1;
            for (auto examConflict = solutionPeriods[period].begin(); examConflict != solutionPeriods[period].end(); ++examConflict) {
                if (conflictMatrix[sortedExam][*examConflict] > 0) {
                    isSafe = 0;
                }
            }
            if (isSafe) {
                solutionPeriods[period].insert(sortedExam);
                solutionExam.at(sortedExam) = period;
                goto nextExam;
            }
            if (period == noOfPeriods - 1) {
                solutionPeriods[period].insert(sortedExam);
                solutionExam.at(sortedExam) = period;
            }
        }
        nextExam:;
    }
    printf(" (time taken: %.2fs)\n", (double)(clock() - tInitialSolution)/CLOCKS_PER_SEC);

    // // printing initial solution
    // for (int period = 0; period < noOfPeriods; period++) {
    //     cout << "Period " << period << ": ";
    //     for (auto exam = solutionPeriods[period].begin(); exam != solutionPeriods[period].end(); ++exam) {
    //         cout << *exam << " ";
    //     }
    //     cout << endl;
    // }    

    // for (int exam = 0; exam < noOfExams; exam++) {
    //     cout << exam + 1 << " " << solutionExam[exam] + 1 << endl;
    // }

    /*************************************************************** constaints and penalties *******************************************************/

    // counting conflicting exams
    int conflicts = countConflicts(solutionExam, conflictMatrix);
    cout << "Initial solution conflicts: " << conflicts << endl;
    
    // calculating penalties
    int penalty = calculatePenalty(solutionExam, conflictMatrix);
    cout << "Initial solution penalties: " << penalty << endl;

    double ofv = penalty / noOfStudents;
    cout << "Initial solution objective value: " << ofv << endl;

    /*********************************************************************** stage 1 ***************************************************************/
    cout << "Stage 1..." << endl;
    
    solutionExam = greatDeluge(solutionExam, conflictMatrix, 10000);

    // for (int i = 0; i < 1000; i++) {
    //     solutionExam = moveExam(solutionExam, conflictMatrix);
    // }
    conflicts = countConflicts(solutionExam, conflictMatrix);
    cout << "New solution conflicts: " << conflicts << endl;

    // for (int exam = 0; exam < noOfExams; exam++) {
    //     cout << exam + 1 << " " << solutionExam[exam] + 1 << endl;
    // }

    // calculating penalties
    penalty = calculatePenalty(solutionExam, conflictMatrix);
    cout << "New solution penalties: " << penalty << endl;

    ofv = penalty / noOfStudents;
    cout << "New solution objective value: " << ofv << endl;

    // print computation time
    printf("Time taken: %.2fs\n", (double)(clock() - tStart)/CLOCKS_PER_SEC);

    return 0;
}